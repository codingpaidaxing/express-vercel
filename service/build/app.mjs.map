{"version":3,"sources":["../src/app.ts","../src/routes/users.ts","../src/config/index.ts","../src/utils/index.ts"],"sourcesContent":["// src/app.ts\r\nimport express, { Request, Response } from 'express';\r\nimport { isNotEmptyString } from './utils/is'\r\nimport usersRouter from './routes/users';\r\nimport chatRouter from './routes/chatgpt/index';\r\n\r\n\r\nconst app = express();\r\nconst router = express.Router()\r\n\r\nconst port = 3002;\r\n\r\n// app.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/chat', usersRouter);\r\n\r\n\r\napp.get('/', (req: Request, res: Response) => {\r\n  res.send('Hello, TypeScript Express!');\r\n});\r\n\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is running on http://localhost:${port}`);\r\n});\r\n","import express, { Request, Response } from 'express';\r\n// 通过命令 npm i sha1 安装 sha1\r\nimport sha1 from 'sha1';\r\n\r\nimport axios from 'axios';\r\nimport config from '../config/index';\r\nimport { sendResponse } from '../utils'\r\n\r\nconst router = express.Router();\r\nconst { appid, secret } = config;\r\n\r\n\r\nrouter.post('/wx-user', async function (req, res, next) {\r\n  console.log(\"============H5个人信息接口================\")\r\n  res.send({ status: 'Success', message: '', data: { wx_token: \"token_paidaxing\", user_info: {nickname: \"paidaxing\"} } })\r\n});\r\n\r\n\r\n/* GET users listing. */\r\nrouter.get('/', async function (req, res, next) {\r\n  // 1. 获取当前页面 URL中的code\r\n  const code: string = req.query.code as string;\r\n  // 2. 通过code换取网页授权access_token 和 openid  userAccessToken\r\n  const result = await userAccessTokenByCode(code);\r\n  const access_token = result.data.access_token;\r\n  const openid = result.data.openid\r\n  // 3. 根据access_token 和 openid获取用户信息\r\n  const userInfoData = await userInfoByAccessTokenAndOpenId(access_token, openid);\r\n  console.log(\"userInfo:\", userInfoData.data);\r\n  res.send(userInfoData.data);\r\n});\r\n\r\n// 通过code换取网页授权access_token\r\nasync function userAccessTokenByCode(code: string) {\r\n  try {\r\n    // 替换以下链接中的参数为实际值\r\n    var access_token_url = `https://api.weixin.qq.com/sns/oauth2/access_token?appid=${appid}&secret=${secret}&code=${code}&grant_type=authorization_code`;\r\n    let access_token_data = await axios.get(access_token_url);\r\n\r\n    let access_token = access_token_data.data.access_token;\r\n    let openid = access_token_data.data.openid;\r\n\r\n    // 拉取用户信息\r\n    let user_info_url = `https://api.weixin.qq.com/sns/userinfo?access_token=${access_token}&openid=${openid}&lang=zh_CN`;\r\n    console.log(\"user_info_url\", user_info_url);\r\n\r\n    return sendResponse({\r\n      type: 'Success',\r\n      data: access_token_data.data,\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Error fetching access token:', error);\r\n    return sendResponse({\r\n      type: 'Fail',\r\n      message: error.message ?? 'Failed',\r\n    });\r\n  }\r\n};\r\n\r\n// 用户信息\r\nasync function userInfoByAccessTokenAndOpenId(access_token: string, openid: string) {\r\n  console.log(access_token, openid)\r\n  let user_info_url = `https://api.weixin.qq.com/sns/userinfo?access_token=${access_token}&openid=${openid}&lang=zh_CN`\r\n  // let user_info_url = `https://api.weixin.qq.com/cgi-bin/user/info?access_token=${access_token}&openid=${openid}&lang=zh_CN`;\r\n  console.log(\"获取用户的请求地址:\", user_info_url);\r\n  let result = axios.get(user_info_url);\r\n  return result;\r\n};\r\n\r\n\r\n\r\nrouter.get('/wx-auth', function (req, res, next) {\r\n  let { signature, timestamp, nonce, echostr } = req.query;\r\n  let token = 'paidaxing';\r\n  let array = [timestamp, nonce, token];\r\n  array.sort(); // 字典排序\r\n  let str = array.join('');\r\n  let resultStr = sha1(str) // 对字符串str进行sha1进行加密\r\n  if (resultStr === signature) {\r\n    res.set('Content-Type', 'text/plain')\r\n    res.send(echostr);\r\n  } else {\r\n    res.send('Error!!!!!!')\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default router;","const config = {\r\n    appid: 'wx6361298f0e180aa1',\r\n    secret: '741d6da7a14325fa0f49bb07fc8ae41b',\r\n};\r\n\r\nexport default config;\r\n","interface SendResponseOptions<T = any> {\r\n    type: 'Success' | 'Fail'\r\n    message?: string\r\n    data?: T\r\n  }\r\n  \r\n  export function sendResponse<T>(options: SendResponseOptions<T>) {\r\n    if (options.type === 'Success') {\r\n      return Promise.resolve({\r\n        message: options.message ?? null,\r\n        data: options.data ?? null,\r\n        status: options.type,\r\n      })\r\n    }\r\n  \r\n    // eslint-disable-next-line prefer-promise-reject-errors\r\n    return Promise.reject({\r\n      message: options.message ?? 'Failed',\r\n      data: options.data ?? null,\r\n      status: options.type,\r\n    })\r\n  }\r\n  "],"mappings":"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","names":["express","express","router"]}